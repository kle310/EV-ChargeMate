name: Remote Git Pull and Run Playwright Tests

on:
  push:
    branches:
      - main # Trigger for main branch
      - staging # Trigger for staging branch

jobs:
  run-playwright-tests-on-staging:
    if: github.ref == 'refs/heads/staging'
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install dependencies
        run: |
          npm ci

      - name: Set up environment variables from secrets and start the server
        run: |
          export DB_HOST=${{ secrets.DB_HOST }}
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          export DB_NAME=${{ secrets.DB_DATABASE }}
          export DB_PORT=${{ secrets.DB_PORT }}
          export DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
          npm run start &
          echo "Server started"

      - name: Install Playwright dependencies
        run: |
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          npm run test

      - name: Upload Playwright artifacts
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy-to-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      - name: SSH into server and perform git pull
        env:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
        run: |
          ssh $REMOTE_USER@$REMOTE_HOST << EOF
            cd code/production
            git pull origin main
            npm run build
          EOF
